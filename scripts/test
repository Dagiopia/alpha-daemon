#!/usr/bin/env python3

import json
import pathlib
import subprocess

import jsonrpcclient
import time

from snetd_alpha import configuration as config

TEST_DAEMON_CONFIGURATION = {
    "ETHEREUM_JSON_RPC_ENDPOINT": "http://127.0.0.1:8545",
    "HDWALLET_INDEX": 4
}


def main():
    root_path = pathlib.Path(__file__).absolute().parent.parent
    scripts_path = root_path.joinpath("scripts")
    blockchain_path = root_path.joinpath("blockchain")
    node_path = blockchain_path.joinpath("node_modules")
    build_state_path = blockchain_path.joinpath("build", "state")

    # Cleanup db, build state, config
    subprocess.call(["rm", "-rf", config.DB_PATH + ".db"], cwd=root_path)
    subprocess.call(["rm", "-rf", config.CONFIG_PATH], cwd=root_path)
    subprocess.call(["./blockchain", "clean"], cwd=scripts_path)

    # Install dependencies, create mnemonic
    subprocess.call(["./blockchain", "install"], cwd=scripts_path)
    subprocess.call(["./blockchain", "create-mnemonic"], cwd=scripts_path)
    with open(build_state_path.joinpath("Mnemonic.json")) as f:
        TEST_DAEMON_CONFIGURATION["HDWALLET_MNEMONIC"] = json.load(f)["Mnemonic"]

    # Start test RPC with mnemonic
    ganache_p = subprocess.Popen(["./.bin/ganache-cli", "-m", TEST_DAEMON_CONFIGURATION["HDWALLET_MNEMONIC"]],
                                 cwd=node_path)

    # Get Agent contract deployed and recorded
    subprocess.call(["./blockchain", "bootstrap-agent"], cwd=scripts_path)
    with open(build_state_path.joinpath("AgentAddress.json")) as f:
        TEST_DAEMON_CONFIGURATION["AGENT_CONTRACT_ADDRESS"] = json.load(f)["Agent"]

    # Write daemon configuration
    with open(root_path.joinpath(config.CONFIG_PATH), 'w') as f:
        json.dump(TEST_DAEMON_CONFIGURATION, f)

    # Start daemon
    snetd_p = subprocess.Popen(["snetd"], cwd=root_path)

    # Get Job contract deployed, funded, signed
    subprocess.call(["./blockchain", "bootstrap-job"], cwd=scripts_path)
    with open(build_state_path.joinpath("JobAddress.json")) as f:
        job_address = json.load(f)["Job"]
    with open(build_state_path.joinpath("JobInvocation.json")) as f:
        job_signature = json.load(f)["Signature"]

    time.sleep(config.POLL_SLEEP_SECS * 1.5)

    try:
        jsonrpcclient.request("http://127.0.0.1:{}".format(config.DAEMON_LISTENING_PORT), "whatever",
                              job_address=job_address,
                              job_signature=job_signature)

        time.sleep(config.POLL_SLEEP_SECS * 1.5)
    except Exception as e:
        print(e)
    finally:
        snetd_p.terminate()
        ganache_p.terminate()
        subprocess.call(["rm", "-rf", config.CONFIG_PATH], cwd=root_path)
        subprocess.call(["rm", "-rf", config.DB_PATH + ".db"], cwd=root_path)


if __name__ == "__main__":
    main()
